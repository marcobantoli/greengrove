name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Frontend and Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Node.js setup for the frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install --legacy-peer-deps

      - name: Lint Frontend Code
        working-directory: frontend
        run: npm run lint

      # Java setup for the backend
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Lint Backend Code
        working-directory: rest-service
        run: mvn checkstyle:check

  build:
    name: Build Frontend and Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Build Frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install and Build Frontend
        working-directory: frontend
        run: |
          npm install --legacy-peer-deps
          npm run build

      # Build Backend
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Backend
        working-directory: rest-service
        run: mvn package

  test:
    name: Test Frontend and Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Test Frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install and Test Frontend
        working-directory: frontend
        run: |
          npm install --legacy-peer-deps
          npm test

      # Test Backend
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Test Backend
        working-directory: rest-service
        run: mvn test

  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    env:
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      REACT_LOCAL_PORT: ${{ secrets.REACT_LOCAL_PORT }}
      REACT_DOCKER_PORT: ${{ secrets.REACT_DOCKER_PORT }}
      SPRING_LOCAL_PORT: ${{ secrets.SPRING_LOCAL_PORT }}
      SPRING_DOCKER_PORT: ${{ secrets.SPRING_DOCKER_PORT }}
      MYSQL_URL: ${{ secrets.MYSQL_URL }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      JWT_SECURITYKEY: ${{ secrets.JWT_SECURITYKEY }}
      JWT_EXPIRATIONTIME: ${{ secrets.JWT_EXPIRATIONTIME }}
      MYSQLDB_LOCAL_PORT: ${{ secrets.MYSQLDB_LOCAL_PORT }}
      MYSQLDB_DOCKER_PORT: ${{ secrets.MYSQLDB_DOCKER_PORT }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_ALLOW_EMPTY_PASSWORD: ${{ secrets.MYSQL_ALLOW_EMPTY_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up Docker
        run: |
          docker --version

      - name: Build Docker Containers
        run: docker-compose -f docker-compose-dev.yml build
